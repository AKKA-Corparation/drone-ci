version: '3.9'

services:
  server:
    image: drone/drone:2
    env_file: ${APP_DOTENV:-.env}
    volumes:
      - /var/lib/drone:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    ports:
      - "4040:80"
    depends_on:
      db:
        condition: service_healthy
  first_runner:
    image: drone/drone-runner-docker:1
    environment:
      - DRONE_RPC_PROTO=${DRONE_SERVER_PROTO:-http}
      - DRONE_RPC_HOST=${DRONE_SERVER_HOST:-localhost:4040}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET:-NOT_SO_SECRET}
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY:-2}
      - DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME:-first-runner}
    depends_on:
      - server
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  db:
    hostname: ${DB_NAME:-akka-cc}
    image: postgres:12-alpine
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER:-akka-cc}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-FehKNot7}
      - POSTGRES_DB=${DB_NAME:-akka-cc}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "akka-cc" ]
      start_period: 30s
      interval: 10s
      timeout: 30s
      retries: 5

volumes:
  db-data:
